#!/usr/bin/env python

# Copyright (c) 2013 Galah Group LLC
# Copyright (c) 2013 Other contributers as noted in the CONTRIBUTERS file
#
# This file is part of galah-apiclient.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if __name__ != "__main__":
    raise ImportError("This is a script and should not be imported.")

import sys
import pprint
import os

# Initialize the logging library.
import apiclient.logcontrol
import logging
apiclient.logcontrol.init_logging()
logger = logging.getLogger("apiclient")

# Load up the configuration
import apiclient.config as config
config.CONFIG = config.load_config()
if "verbosity" in config.CONFIG:
    apiclient.logcontrol.set_level(config.CONFIG["verbosity"])
logger.debug(
    "Final configuration dictionary...\n%s",
    pprint.pformat(config.CONFIG, width = 72)
)

# Set to True by any of the "do something and exit" options.
exit_now = False

if config.CONFIG.get("logout"):
	session_path = config.CONFIG["session-path"]
	if os.path.isfile(session_path):
		logger.info("Deleting session file at %s.", session_path)
		os.remove(session_path)
	else:
		logger.info(
			"No session file exists at %s. Doing nothing.",
			session_path
		)

	exit_now = True

if config.CONFIG.get("clear-api-info"):
	api_info_path = config.CONFIG["api-info-path"]
	if os.path.isfile(api_info_path):
		logger.info("Deleting session file at %s.", api_info_path)
		os.remove(api_info_path)
	else:
		logger.info(
			"No session file exists at %s. Doing nothing.",
			api_info_path
		)

	exit_now = True

if exit_now:
	sys.exit(0)

# Grab the user's old session information.
import apiclient.communicate
session = apiclient.communicate.APIClientSession()
session.load()

save_session = False

# Login if necessary
import apiclient.ui
if session.user is None:
    session.login(*apiclient.ui.determine_credentials())
    save_session = True

# Request the API info from the server if
if session.api_info is None:
    session.fetch_api_info()
    save_session = True

if save_session:
	session.save()

# Perform the command the user wants to execute
command_args, command_kwargs = apiclient.ui.parse_raw_args(config.ARGS)

if command_args:
	session.call(command_args[0], *command_args[1:], **command_kwargs)

